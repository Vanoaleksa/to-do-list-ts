{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nconst initialState = {\n  items: [{\n    id: 0,\n    name: 'MELNI4EK ЛУЧШИЙ',\n    isCompleted: false\n  }]\n};\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const items = state.items;\n\n  switch (action.type) {\n    case actionTypes.ADD_ITEM:\n      const newItem = {\n        id: items.length >= 1 ? items[items.length - 1].id + 1 : 0,\n        name: action.payload.name,\n        isCompleted: false\n      };\n      return { ...state,\n        items: items.concat(newItem)\n      };\n\n    case actionTypes.REMOVE_ITEM:\n      const updatedItems = items.filter(item => item.id !== action.payload.id);\n      return { ...state,\n        items: updatedItems\n      };\n\n    case actionTypes.CHANGE_ITEM_STATE:\n      const updatedArray = items.map(item => {\n        if (item.id === action.payload.id) {\n          return { ...item,\n            isCompleted: !item.isCompleted\n          };\n        }\n\n        return item;\n      });\n      return { ...state,\n        items: updatedArray\n      };\n\n    case actionTypes.RESET_ALL:\n      return { ...state,\n        items: []\n      };\n\n    case actionTypes.REMOVE_COMPLETED_ITEMS:\n      const notCompletedItems = items.filter(item => item.isCompleted === false);\n      return { ...state,\n        items: notCompletedItems\n      };\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/ivan/to-do-list-typescript/src/redux/reducer.ts"],"names":["actionTypes","initialState","items","id","name","isCompleted","reducer","state","action","type","ADD_ITEM","newItem","length","payload","concat","REMOVE_ITEM","updatedItems","filter","item","CHANGE_ITEM_STATE","updatedArray","map","RESET_ALL","REMOVE_COMPLETED_ITEMS","notCompletedItems"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AAGA,MAAMC,YAAwB,GAAG;AAC7BC,EAAAA,KAAK,EAAE,CAAC;AAACC,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,IAAI,EAAC,iBAAZ;AAA+BC,IAAAA,WAAW,EAAC;AAA3C,GAAD;AADsB,CAAjC;;AAIA,MAAMC,OAAO,GAAG,YAGC;AAAA,MAFbC,KAEa,uEAFON,YAEP;AAAA,MADbO,MACa;AACb,QAAMN,KAAqB,GAAGK,KAAK,CAACL,KAApC;;AACA,UAAQM,MAAM,CAACC,IAAf;AACI,SAAKT,WAAW,CAACU,QAAjB;AACI,YAAMC,OAAqB,GAAG;AAC1BR,QAAAA,EAAE,EAAED,KAAK,CAACU,MAAN,IAAgB,CAAhB,GAAoBV,KAAK,CAACA,KAAK,CAACU,MAAN,GAAe,CAAhB,CAAL,CAAwBT,EAAxB,GAA6B,CAAjD,GAAqD,CAD/B;AAE1BC,QAAAA,IAAI,EAAEI,MAAM,CAACK,OAAP,CAAeT,IAFK;AAG1BC,QAAAA,WAAW,EAAE;AAHa,OAA9B;AAKA,aAAO,EACH,GAAGE,KADA;AAEHL,QAAAA,KAAK,EAAEA,KAAK,CAACY,MAAN,CAAaH,OAAb;AAFJ,OAAP;;AAIJ,SAAKX,WAAW,CAACe,WAAjB;AACI,YAAMC,YAA4B,GAAGd,KAAK,CAACe,MAAN,CACjCC,IAAI,IAAIA,IAAI,CAACf,EAAL,KAAYK,MAAM,CAACK,OAAP,CAAeV,EADF,CAArC;AAGA,aAAO,EACH,GAAGI,KADA;AAEHL,QAAAA,KAAK,EAAEc;AAFJ,OAAP;;AAKJ,SAAKhB,WAAW,CAACmB,iBAAjB;AACI,YAAMC,YAA4B,GAAGlB,KAAK,CAACmB,GAAN,CAAWH,IAAD,IAAU;AACrD,YAAIA,IAAI,CAACf,EAAL,KAAYK,MAAM,CAACK,OAAP,CAAeV,EAA/B,EAAmC;AAC/B,iBAAO,EAAE,GAAGe,IAAL;AAAWb,YAAAA,WAAW,EAAE,CAACa,IAAI,CAACb;AAA9B,WAAP;AACH;;AACD,eAAOa,IAAP;AACH,OALoC,CAArC;AAOA,aAAO,EACH,GAAGX,KADA;AAEHL,QAAAA,KAAK,EAAEkB;AAFJ,OAAP;;AAIJ,SAAKpB,WAAW,CAACsB,SAAjB;AACI,aAAO,EACH,GAAGf,KADA;AAEHL,QAAAA,KAAK,EAAE;AAFJ,OAAP;;AAIJ,SAAKF,WAAW,CAACuB,sBAAjB;AACI,YAAMC,iBAAiC,GAAGtB,KAAK,CAACe,MAAN,CACtCC,IAAI,IAAIA,IAAI,CAACb,WAAL,KAAqB,KADS,CAA1C;AAGA,aAAO,EACH,GAAGE,KADA;AAEHL,QAAAA,KAAK,EAAEsB;AAFJ,OAAP;AAzCR;;AA8CA,SAAOjB,KAAP;AACH,CApDD;;AAsDA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from \"./actionTypes\"\nimport { ItemsState, ItemsAction, toDoListItem } from \"./types\"\n\nconst initialState: ItemsState = {\n    items: [{id:0, name:'MELNI4EK ЛУЧШИЙ', isCompleted:false},]\n}\n\nconst reducer = (\n    state: ItemsState = initialState,\n    action: ItemsAction\n): ItemsState => {\n    const items: toDoListItem[] = state.items\n    switch (action.type) {\n        case actionTypes.ADD_ITEM:\n            const newItem: toDoListItem = {\n                id: items.length >= 1 ? items[items.length - 1].id + 1 : 0,\n                name: action.payload.name,\n                isCompleted: false,\n            }\n            return {\n                ...state,\n                items: items.concat(newItem),\n            }\n        case actionTypes.REMOVE_ITEM:\n            const updatedItems: toDoListItem[] = items.filter(\n                item => item.id !== action.payload.id\n            )\n            return {\n                ...state,\n                items: updatedItems,\n            }\n\n        case actionTypes.CHANGE_ITEM_STATE:\n            const updatedArray: toDoListItem[] = items.map((item) => {\n                if (item.id === action.payload.id) {\n                    return { ...item, isCompleted: !item.isCompleted }\n                }\n                return item\n            }\n            )\n            return {\n                ...state,\n                items: updatedArray,\n            }\n        case actionTypes.RESET_ALL:\n            return {\n                ...state,\n                items: [],\n            }\n        case actionTypes.REMOVE_COMPLETED_ITEMS:\n            const notCompletedItems: toDoListItem[] = items.filter(\n                item => item.isCompleted === false\n            )\n            return {\n                ...state,\n                items: notCompletedItems,\n            }\n    }\n    return state\n}\n\nexport default reducer\n"]},"metadata":{},"sourceType":"module"}